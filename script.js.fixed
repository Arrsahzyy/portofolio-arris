// Menunggu hingga seluruh konten halaman dimuat
document.addEventListener('DOMContentLoaded', function() {
    
    // =================================================================
    // 1. INISIALISASI LIBRARY
    // =================================================================

    // Inisialisasi AOS (Animate On Scroll) untuk animasi saat scroll
    if (typeof AOS !== 'undefined') {
        AOS.init({
            duration: 800,
            once: true,
            offset: 50,
        });
    }

    // Inisialisasi Typed.js untuk efek mengetik
    const typedElement = document.getElementById('typed-text');
    if (typedElement && typeof Typed !== 'undefined') {
        new Typed('#typed-text', {
            strings: ['Problem Solver.', 'Inovator.', 'Pengembang Software.', 'Pecinta Robotika.', 'Future Engineer.', 'Machine Learning Learner.'],
            typeSpeed: 70,
            backSpeed: 40,
            loop: true,
            smartBackspace: true,
        });
    }

    // Render semua ikon Lucide
    if (typeof lucide !== 'undefined' && lucide.createIcons) {
        lucide.createIcons();
    }

    // =================================================================
    // 2. ANIMASI GSAP (GreenSock Animation Platform)
    // =================================================================

    // Periksa apakah GSAP tersedia
    if (typeof gsap !== 'undefined') {
        // Animasi intro untuk Hero Section
        const heroContent = document.querySelector('.hero-content');
        if (heroContent) {
            gsap.timeline({ defaults: { ease: "power3.out" } })
                .to('.hero-content > div', { opacity: 1, y: 0, duration: 1, delay: 0.2 })
                .to('.hero-content > h1', { opacity: 1, y: 0, duration: 0.8 }, "-=0.6")
                .to('.hero-content > p', { opacity: 1, y: 0, duration: 0.8, stagger: 0.2 }, "-=0.6")
                .to('.hero-content > .flex', { opacity: 1, y: 0, duration: 0.8 }, "-=0.6");
        }
        
        // Animasi "magnetic" untuk tombol
        const buttons = document.querySelectorAll('.btn-primary, .btn-secondary');
        buttons.forEach(btn => {
            btn.addEventListener('mousemove', e => {
                const rect = btn.getBoundingClientRect();
                const x = ((e.clientX - rect.left) / rect.width - 0.5) * 30;
                const y = ((e.clientY - rect.top) / rect.height - 0.5) * 30;

                gsap.to(btn, { x: x, y: y, duration: 0.5, ease: 'power3.out' });
            });

            btn.addEventListener('mouseleave', () => {
                gsap.to(btn, { x: 0, y: 0, duration: 0.5, ease: 'elastic.out(1, 0.3)' });
            });
        });
    }

    // =================================================================
    // 3. EFEK PARTIKEL INTERAKTIF PADA CANVAS (UPGRADED)
    // =================================================================

    const canvas = document.getElementById('particle-canvas');
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    resizeCanvas();

    let particlesArray = [];
    const mouse = {
        x: null,
        y: null,
        radius: Math.min(canvas.height, canvas.width) / 10
    };

    window.addEventListener('mousemove', e => {
        mouse.x = e.x;
        mouse.y = e.y;
    });

    window.addEventListener('resize', resizeCanvas);

    class Particle {
        constructor(x, y, directionX, directionY, size, color) {
            this.x = x;
            this.y = y;
            this.directionX = directionX;
            this.directionY = directionY;
            this.size = size;
            this.color = color;
            this.opacity = 0.7;
        }

        draw() {
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);
            ctx.fillStyle = this.color;
            ctx.globalAlpha = this.opacity;
            ctx.fill();
            ctx.globalAlpha = 1;
        }

        update() {
            if (this.x > canvas.width || this.x < 0) this.directionX = -this.directionX;
            if (this.y > canvas.height || this.y < 0) this.directionY = -this.directionY;

            let dx = mouse.x - this.x;
            let dy = mouse.y - this.y;
            let distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < mouse.radius && mouse.x != null) {
                if (distance < mouse.radius / 2) {
                    this.opacity = 1;
                    this.x -= dx / 30;
                    this.y -= dy / 30;
                } else {
                    this.opacity = 0.3;
                }
            } else {
                this.opacity = 0.7;
                this.x += this.directionX;
                this.y += this.directionY;
            }

            this.draw();
        }
    }

    function init() {
        particlesArray = [];
        let numberOfParticles = Math.floor((canvas.height * canvas.width) / 8000);
        
        for (let i = 0; i < numberOfParticles; i++) {
            let size = Math.random() * 3 + 1;
            let x = Math.random() * (innerWidth - size * 2 - size) + size;
            let y = Math.random() * (innerHeight - size * 2 - size) + size;
            let directionX = (Math.random() * 2) - 1;
            let directionY = (Math.random() * 2) - 1;
            let color = 'rgba(45, 212, 191, 0.5)';

            particlesArray.push(new Particle(x, y, directionX, directionY, size, color));
        }
    }

    function connect() {
        let opacityValue = 1;
        for (let a = 0; a < particlesArray.length; a++) {
            for (let b = a; b < particlesArray.length; b++) {
                let distance = ((particlesArray[a].x - particlesArray[b].x) ** 2) + ((particlesArray[a].y - particlesArray[b].y) ** 2);
                
                if (distance < (canvas.width / 7) * (canvas.height / 7)) {
                    opacityValue = 1 - (distance / 20000);
                    ctx.strokeStyle = `rgba(45, 212, 191, ${opacityValue})`;
                    ctx.lineWidth = 1;
                    ctx.beginPath();
                    ctx.moveTo(particlesArray[a].x, particlesArray[a].y);
                    ctx.lineTo(particlesArray[b].x, particlesArray[b].y);
                    ctx.stroke();
                }
            }
        }
    }

    function animate() {
        requestAnimationFrame(animate);
        ctx.clearRect(0, 0, innerWidth, innerHeight);

        for (let i = 0; i < particlesArray.length; i++) {
            particlesArray[i].update();
        }
        connect();
    }

    init();
    animate();

    // =================================================================
    // 4. NAVIGATION & SCROLL BEHAVIOR
    // =================================================================

    const navbar = document.getElementById('navbar');
    const navLinks = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('section');

    // Fungsi untuk mengubah status navbar saat scroll
    window.addEventListener('scroll', () => {
        if (window.scrollY > 50) {
            navbar.classList.add('scrolled');
        } else {
            navbar.classList.remove('scrolled');
        }

        // Highlight active section in navbar
        let current = '';
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            if (pageYOffset >= sectionTop - 200) {
                current = section.getAttribute('id');
            }
        });

        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${current}`) {
                link.classList.add('active');
            }
        });
    });

    // Smooth scroll untuk navigation links
    navLinks.forEach(link => {
        link.addEventListener('click', e => {
            e.preventDefault();
            const targetId = link.getAttribute('href');
            const targetSection = document.querySelector(targetId);
            
            if (targetSection) {
                targetSection.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // =================================================================
    // 5. DARK MODE TOGGLE
    // =================================================================

    const themeToggle = document.getElementById('theme-toggle');
    const darkIcon = document.getElementById('theme-toggle-dark-icon');
    const lightIcon = document.getElementById('theme-toggle-light-icon');

    // Check for saved theme preference
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
        document.documentElement.classList.toggle('dark', savedTheme === 'dark');
        updateThemeIcons(savedTheme === 'dark');
    } else {
        // Default to system preference
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        document.documentElement.classList.toggle('dark', prefersDark);
        updateThemeIcons(prefersDark);
    }

    function updateThemeIcons(isDark) {
        if (isDark) {
            darkIcon.classList.add('hidden');
            lightIcon.classList.remove('hidden');
        } else {
            darkIcon.classList.remove('hidden');
            lightIcon.classList.add('hidden');
        }
    }

    themeToggle.addEventListener('click', () => {
        const isDark = document.documentElement.classList.toggle('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        updateThemeIcons(isDark);
    });

    // =================================================================
    // 6. MOBILE MENU
    // =================================================================

    const menuBtn = document.getElementById('menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileLinks = document.querySelectorAll('.nav-link-mobile');

    menuBtn.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
    });

    // Close mobile menu when link clicked
    mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
            mobileMenu.classList.add('hidden');
        });
    });

    // =================================================================
    // 7. EMAIL COPY FUNCTIONALITY
    // =================================================================

    const copyEmailBtn = document.getElementById('copy-email-btn');
    const emailText = document.getElementById('email-text');
    const copyFeedback = document.getElementById('copy-feedback');

    copyEmailBtn.addEventListener('click', async () => {
        try {
            await navigator.clipboard.writeText(emailText.textContent);
            copyFeedback.style.opacity = '1';
            setTimeout(() => {
                copyFeedback.style.opacity = '0';
            }, 2000);
        } catch (err) {
            console.log('Fallback: copy text manually');
            // Fallback untuk browser yang tidak mendukung clipboard API
            const tempInput = document.createElement('input');
            tempInput.value = emailText.textContent;
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand('copy');
            document.body.removeChild(tempInput);
            
            copyFeedback.style.opacity = '1';
            setTimeout(() => {
                copyFeedback.style.opacity = '0';
            }, 2000);
        }
    });

    // =================================================================
    // 8. SCROLL PROGRESS BAR (SVG CIRCUIT)
    // =================================================================

    const progressPath = document.getElementById('circuit-progress');
    if (progressPath) {
        const pathLength = progressPath.getTotalLength();
        progressPath.style.strokeDasharray = pathLength + ' ' + pathLength;
        progressPath.style.strokeDashoffset = pathLength;

        function updateProgress() {
            const scroll = window.pageYOffset;
            const height = document.documentElement.scrollHeight - window.innerHeight;
            const progress = pathLength - (scroll * pathLength / height);
            progressPath.style.strokeDashoffset = progress;
        }

        window.addEventListener('scroll', updateProgress);
        updateProgress();
    }

    // =================================================================
    // 9. SKILL CARDS ANIMATION
    // =================================================================

    const skillCards = document.querySelectorAll('.skill-card');
    skillCards.forEach((card, index) => {
        card.addEventListener('mouseenter', () => {
            card.style.transform = 'translateY(-10px) scale(1.05)';
            card.style.transition = 'all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        });

        card.addEventListener('mouseleave', () => {
            card.style.transform = 'translateY(0) scale(1)';
        });

        // Staggered animation on load
        setTimeout(() => {
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 100);
    });

    // =================================================================
    // 10. SOCIAL ICONS HOVER EFFECTS
    // =================================================================

    const socialIcons = document.querySelectorAll('.social-icon');
    socialIcons.forEach(icon => {
        icon.addEventListener('mouseenter', () => {
            icon.style.transform = 'translateY(-5px) scale(1.1)';
            icon.style.transition = 'all 0.3s ease';
        });

        icon.addEventListener('mouseleave', () => {
            icon.style.transform = 'translateY(0) scale(1)';
        });
    });

    // =================================================================
    // 11. PHOTO HOVER EFFECTS
    // =================================================================

    const photoContainer = document.querySelector('.photo-container');
    if (photoContainer) {
        const photo = photoContainer.querySelector('.about-photo');
        const overlay = photoContainer.querySelector('.photo-overlay');
        const glow = photoContainer.querySelector('.photo-glow');

        photoContainer.addEventListener('mouseenter', () => {
            if (overlay) overlay.style.opacity = '1';
            if (glow) glow.style.opacity = '1';
            if (photo) photo.style.transform = 'scale(1.05) rotate(2deg)';
        });

        photoContainer.addEventListener('mouseleave', () => {
            if (overlay) overlay.style.opacity = '0';
            if (glow) glow.style.opacity = '0';
            if (photo) photo.style.transform = 'scale(1) rotate(0deg)';
        });
    }

    // =================================================================
    // 12. YEAR UPDATE
    // =================================================================

    const currentYearElement = document.getElementById('current-year');
    if (currentYearElement) {
        currentYearElement.textContent = new Date().getFullYear();
    }

    // =================================================================
    // 13. INTERSECTION OBSERVER FOR ANIMATIONS
    // =================================================================

    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate');
            }
        });
    }, observerOptions);

    // Observe elements for animation triggers
    const elementsToObserve = document.querySelectorAll('.section-title, .skill-card, .project-card');
    elementsToObserve.forEach(el => observer.observe(el));

    // =================================================================
    // 14. ENHANCED PROJECT SECTION ANIMATIONS
    // =================================================================

    const projectSection = document.getElementById('projects');
    const projectCards = document.querySelectorAll('.project-card');
    const projectTitle = projectSection?.querySelector('.section-title');
    const projectGrid = projectSection?.querySelector('.grid');

    // Enhanced project section observer
    if (projectSection) {
        const projectObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // Animate title
                    if (projectTitle) {
                        projectTitle.classList.add('animate');
                    }
                    
                    // Animate grid background
                    if (projectGrid) {
                        projectGrid.classList.add('animate');
                    }
                    
                    // Animate timeline nodes
                    const timelineNodes = document.querySelectorAll('.timeline-node');
                    timelineNodes.forEach((node, index) => {
                        setTimeout(() => {
                            node.style.opacity = '1';
                            node.style.transform = 'scale(1.2)';
                            setTimeout(() => {
                                node.style.transform = 'scale(1)';
                            }, 300);
                        }, index * 200);
                    });
                }
            });
        }, { threshold: 0.3 });
        
        projectObserver.observe(projectSection);
    }

    // Enhanced project card interactions
    projectCards.forEach((card, index) => {
        // Add loading state initially
        card.classList.add('loading');
        
        // Remove loading state with stagger
        setTimeout(() => {
            card.classList.remove('loading');
        }, 1000 + (index * 200));
        
        // Enhanced hover effects
        card.addEventListener('mouseenter', () => {
            // Pause floating animation
            card.style.animationPlayState = 'paused';
            
            // Add subtle transform to other cards
            projectCards.forEach((otherCard) => {
                if (otherCard !== card) {
                    otherCard.style.transform = 'scale(0.95) translateZ(0)';
                    otherCard.style.opacity = '0.7';
                }
            });
        });
        
        card.addEventListener('mouseleave', () => {
            // Resume floating animation
            card.style.animationPlayState = 'running';
            
            // Reset other cards
            projectCards.forEach((otherCard) => {
                otherCard.style.transform = '';
                otherCard.style.opacity = '';
            });
        });
        
        // Touch interactions for mobile
        card.addEventListener('touchstart', (e) => {
            card.classList.add('touched');
            
            // Remove touched class from other cards
            projectCards.forEach(otherCard => {
                if (otherCard !== card) {
                    otherCard.classList.remove('touched');
                }
            });
            
            e.stopPropagation();
        });
    });
    
    // Remove touched class on outside tap
    document.addEventListener('touchstart', (e) => {
        if (!e.target.closest('.project-card')) {
            projectCards.forEach(card => {
                card.classList.remove('touched');
            });
        }
    });

    // =================================================================
    // 15. BACK TO TOP BUTTON
    // =================================================================

    const backToTopBtn = document.getElementById('back-to-top');
    
    function toggleBackToTop() {
        if (window.scrollY > window.innerHeight * 0.5) {
            backToTopBtn.style.display = 'block';
        } else {
            backToTopBtn.style.display = 'none';
        }
    }
    
    window.addEventListener('scroll', toggleBackToTop);
    backToTopBtn.addEventListener('click', function() {
        window.scrollTo({ top: 0, behavior: 'smooth' });
    });
    
    // Initial state
    toggleBackToTop();

    // =================================================================
    // 16. TECH TAG TOOLTIPS
    // =================================================================

    document.querySelectorAll('.tech-tag').forEach(function(tag) {
        tag.addEventListener('mouseenter', function() {
            tag.setAttribute('title', tag.textContent);
        });
    });

});
